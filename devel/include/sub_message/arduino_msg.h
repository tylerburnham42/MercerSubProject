// Generated by gencpp from file sub_message/arduino_msg.msg
// DO NOT EDIT!


#ifndef SUB_MESSAGE_MESSAGE_ARDUINO_MSG_H
#define SUB_MESSAGE_MESSAGE_ARDUINO_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sub_message
{
template <class ContainerAllocator>
struct arduino_msg_
{
  typedef arduino_msg_<ContainerAllocator> Type;

  arduino_msg_()
    : frontLeft(0)
    , frontMiddle(0)
    , frontRight(0)
    , backLeft(0)
    , backMiddle(0)
    , backRight(0)  {
    }
  arduino_msg_(const ContainerAllocator& _alloc)
    : frontLeft(0)
    , frontMiddle(0)
    , frontRight(0)
    , backLeft(0)
    , backMiddle(0)
    , backRight(0)  {
    }



   typedef int32_t _frontLeft_type;
  _frontLeft_type frontLeft;

   typedef int32_t _frontMiddle_type;
  _frontMiddle_type frontMiddle;

   typedef int32_t _frontRight_type;
  _frontRight_type frontRight;

   typedef int32_t _backLeft_type;
  _backLeft_type backLeft;

   typedef int32_t _backMiddle_type;
  _backMiddle_type backMiddle;

   typedef int32_t _backRight_type;
  _backRight_type backRight;




  typedef boost::shared_ptr< ::sub_message::arduino_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sub_message::arduino_msg_<ContainerAllocator> const> ConstPtr;

}; // struct arduino_msg_

typedef ::sub_message::arduino_msg_<std::allocator<void> > arduino_msg;

typedef boost::shared_ptr< ::sub_message::arduino_msg > arduino_msgPtr;
typedef boost::shared_ptr< ::sub_message::arduino_msg const> arduino_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sub_message::arduino_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sub_message::arduino_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sub_message

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sub_message': ['/home/tylerburnham42/MercerSubProject/src/sub_message/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sub_message::arduino_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sub_message::arduino_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sub_message::arduino_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sub_message::arduino_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sub_message::arduino_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sub_message::arduino_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sub_message::arduino_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfea4772612819b51cf19b229d824ca0";
  }

  static const char* value(const ::sub_message::arduino_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfea4772612819b5ULL;
  static const uint64_t static_value2 = 0x1cf19b229d824ca0ULL;
};

template<class ContainerAllocator>
struct DataType< ::sub_message::arduino_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sub_message/arduino_msg";
  }

  static const char* value(const ::sub_message::arduino_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sub_message::arduino_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 frontLeft\n\
int32 frontMiddle\n\
int32 frontRight\n\
int32 backLeft\n\
int32 backMiddle\n\
int32 backRight\n\
";
  }

  static const char* value(const ::sub_message::arduino_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sub_message::arduino_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frontLeft);
      stream.next(m.frontMiddle);
      stream.next(m.frontRight);
      stream.next(m.backLeft);
      stream.next(m.backMiddle);
      stream.next(m.backRight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct arduino_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sub_message::arduino_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sub_message::arduino_msg_<ContainerAllocator>& v)
  {
    s << indent << "frontLeft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frontLeft);
    s << indent << "frontMiddle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frontMiddle);
    s << indent << "frontRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frontRight);
    s << indent << "backLeft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.backLeft);
    s << indent << "backMiddle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.backMiddle);
    s << indent << "backRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.backRight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUB_MESSAGE_MESSAGE_ARDUINO_MSG_H
